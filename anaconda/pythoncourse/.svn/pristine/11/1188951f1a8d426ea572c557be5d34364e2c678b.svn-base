{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import word2vec"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Текст взят отсюда\n",
    "\n",
    "http://mattmahoney.net/dc/text8.zip\n",
    "\n",
    "Описание\n",
    "\n",
    "http://mattmahoney.net/dc/textdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "WORKDIR = '/Users/npenzin/Downloads'\n",
    "\n",
    "TXT_FILE = '{}/text8'.format(WORKDIR)\n",
    "TEMP_FILE = '{}/text8-phrases'.format(WORKDIR)\n",
    "BIN_FILE = '{}/text8.bin'.format(WORKDIR)\n",
    "TXT_CLUSTERS_FILE = '{}/text8-clusters.txt'.format(WORKDIR)\n",
    "\n",
    "ENCODING = 'ISO-8859-1' # !!! most bins are not utf-8 !!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2vec.word2phrase(TXT_FILE, TEMP_FILE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2vec.word2vec(TEMP_FILE, BIN_FILE, size=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = word2vec.load(BIN_FILE, encoding=ENCODING)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['</s>', 'the', 'of', ..., 'dakotas', 'nias', 'burlesques'], \n",
       "      dtype='<U78')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98331"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(model.vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2vec.word2clusters(TXT_FILE, TXT_CLUSTERS_FILE, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "indexes, metrics = model.analogy(pos=['king', 'woman'], neg=['man'], n=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('queen', 0.2947757113510544),\n",
       " ('prince', 0.27888602827251774),\n",
       " ('empress', 0.2751313184416069),\n",
       " ('wife', 0.2699426357848716),\n",
       " ('emperor', 0.26784493816874694),\n",
       " ('son', 0.26545033502842513),\n",
       " ('regent', 0.26479214376783955),\n",
       " ('aragon', 0.26144599930049706),\n",
       " ('bishop', 0.26119747232614227),\n",
       " ('monarch', 0.26118616752168317)]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.generate_response(indexes, metrics).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "clusters = word2vec.load_clusters(TXT_CLUSTERS_FILE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.clusters = clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('berlin', 0.3227434979302724, 20),\n",
       " ('munich', 0.2929588774908709, 20),\n",
       " ('vienna', 0.2847366277673925, 12),\n",
       " ('leipzig', 0.27027305773608806, 11),\n",
       " ('moscow', 0.26883008906993666, 74),\n",
       " ('st_petersburg', 0.2674194781535709, 61),\n",
       " ('prague', 0.25258437121106503, 72),\n",
       " ('dresden', 0.24957719967726152, 71),\n",
       " ('z_rich', 0.24763364454140668, 55),\n",
       " ('basel', 0.2427022855103268, 69)]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indexes, metrics = model.analogy(pos=['paris', 'germany'], neg=['france'], n=10)\n",
    "model.generate_response(indexes, metrics).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([b'with', b'into', b'up', b'down', b'off', b'side', b'hand',\n",
       "       b'together', b'top', b'ball', b'double', b'ground', b'ice', b'fast',\n",
       "       b'forward', b'glass', b'sides', b'shape', b'screen', b'bar',\n",
       "       b'chain', b'foot', b'opposite', b'flat', b'bottom', b'wind',\n",
       "       b'edge', b'straight', b'pair', b'onto', b'strings', b'mouse',\n",
       "       b'mouth', b'arm', b'hole', b'door', b'attached', b'shaped',\n",
       "       b'pitch', b'colour', b'shell', b'plate', b'spin', b'camera', b'row',\n",
       "       b'blade', b'leg', b'sharp', b'plastic', b'tube', b'vertical',\n",
       "       b'thin', b'wings', b'window', b'spot', b'wheel', b'bone', b'rear',\n",
       "       b'rings', b'holes', b'rolling', b'neck', b'faces', b'wire',\n",
       "       b'stones', b'cutting', b'mirror', b'tail', b'deck', b'triple',\n",
       "       b'pool', b'legs', b'balls', b'smooth', b'stroke', b'striking',\n",
       "       b'tongue', b'shield', b'tiny', b'lights', b'beam', b'bones',\n",
       "       b'wooden', b'kick', b'bow', b'horizontal', b'rough', b'sheet',\n",
       "       b'barrel', b'dice', b'shots', b'knife', b'trigger', b'pocket',\n",
       "       b'meter', b'plates', b'lens', b'stick', b'rounds', b'thick',\n",
       "       b'sized', b'button', b'cap', b'tip', b'cylinder', b'teeth',\n",
       "       b'finger', b'gear', b'loose', b'sided', b'barrier', b'ace', b'lock',\n",
       "       b'paint', b'bars', b'arrow', b'lift', b'ear', b'pack', b'climbing',\n",
       "       b'bullet', b'stops', b'lightning', b'hammer', b'bubble', b'fingers',\n",
       "       b'tight', b'nose', b'anchor', b'trick', b'specially', b'rotating',\n",
       "       b'suspension', b'mask', b'arrows', b'ink', b'wheels', b'drag',\n",
       "       b'valve', b'hitting', b'elevator', b'cube', b'pipe', b'ears',\n",
       "       b'thrust', b'punch', b'pot', b'cue', b'chest', b'jumping', b'rows',\n",
       "       b'grip', b'rolls', b'rope', b'thumb', b'edges', b'bare', b'bottle',\n",
       "       b'hull', b'cone', b'shoulder', b'backwards', b'tiles', b'rider',\n",
       "       b'pitched', b'slide', b'pit', b'rounded', b'blades', b'piercing',\n",
       "       b'patch', b'bent', b'bag', b'cartridges', b'shaft', b'buttons',\n",
       "       b'helmet', b'spots', b'trap', b'jumps', b'fault', b'burst',\n",
       "       b'batter', b'knives', b'coil', b'blank', b'texture', b'mirrors',\n",
       "       b'fabric', b'bike', b'loading', b'suits', b'hook', b'tightly',\n",
       "       b'enclosed', b'piston', b'thread', b'clockwise', b'pressing',\n",
       "       b'rectangular', b'perpendicular', b'foul', b'curved', b'drops',\n",
       "       b'upright', b'outward', b'scrimmage', b'packed', b'bend', b'bolt',\n",
       "       b'triangular', b'crack', b'valves', b'wax', b'bullets', b'penis',\n",
       "       b'downward', b'knee', b'dive', b'cord', b'backs', b'blocking',\n",
       "       b'marker', b'locks', b'tile', b'sticks', b'bubbles', b'pipes',\n",
       "       b'exterior', b'needle', b'vertically', b'riders', b'upwards',\n",
       "       b'snap', b'twist', b'bonus', b'touching', b'spark', b'spinning',\n",
       "       b'glasses', b'trunk', b'knot', b'ladder', b'vein', b'filling',\n",
       "       b'corners', b'carriage', b'basket', b'underneath', b'strokes',\n",
       "       b'lips', b'crest', b'kicks', b'scroll', b'throat', b'shotgun',\n",
       "       b'replica', b'pile', b'lip', b'twisted', b'fitting', b'ups',\n",
       "       b'wires', b'wrapped', b'toe', b'rim', b'cylinders', b'ceiling',\n",
       "       b'saddle', b'fence', b'slip', b'pad', b'rods', b'flames', b'foil',\n",
       "       b'fork', b'sliding', b'inverted', b'katana', b'ribbon',\n",
       "       b'mouthpiece', b'gently', b'floors', b'horizontally', b'bite',\n",
       "       b'surround', b'upward', b'bows', b'boots', b'caps', b'shoulders',\n",
       "       b'projectile', b'hind', b'cabin', b'tails', b'pitches', b'brush',\n",
       "       b'stiff', b'tops', b'dirt', b'pencil', b'reeds', b'grenade',\n",
       "       b'cart', b'coated', b'patches', b'steering', b'spaced', b'bets',\n",
       "       b'chin', b'flats', b'fuselage', b'bowler', b'spine', b'brake',\n",
       "       b'jaw', b'pedal', b'roller', b'pads', b'toilet', b'domino',\n",
       "       b'cones', b'freeze', b'grappling', b'touches', b'bending',\n",
       "       b'microphone', b'lever', b'spins', b'tires', b'lining', b'pickups',\n",
       "       b'limbs', b'traction', b'bulb', b'alternately', b'thicker',\n",
       "       b'brakes', b'pod', b'stitch', b'dope', b'pits', b'lap', b'wagon',\n",
       "       b'weaving', b'rotate', b'wrist', b'abdomen', b'knitting', b'fore',\n",
       "       b'rails', b'stairs', b'forwards', b'bead', b'comb', b'vibrations',\n",
       "       b'belts', b'cab', b'melted', b'pickup', b'nails', b'crossbow',\n",
       "       b'cylindrical', b'clutch', b'mash', b'packs', b'muzzle', b'yarn',\n",
       "       b'swinging', b'cymbal', b'elongated', b'seating', b'groove',\n",
       "       b'elbow', b'tire', b'ropes', b'knit', b'catches', b'thrower',\n",
       "       b'casing', b'ascending', b'stripe', b'glide', b'conical', b'outs',\n",
       "       b'anchors', b'offs', b'heel', b'posture', b'gears', b'skis',\n",
       "       b'trailing', b'openings', b'slippery', b'helmets', b'foreground',\n",
       "       b'smoothly', b'screw', b'movable', b'puck', b'strung', b'skate',\n",
       "       b'pedals', b'slice', b'concave', b'deflection', b'crank', b'tee',\n",
       "       b'nail', b'kayak', b'soaring', b'fins', b'chunks', b'flattened',\n",
       "       b'torso', b'prop', b'superimposed', b'bearings', b'toes', b'craps',\n",
       "       b'apex', b'fencer', b'winding', b'carts', b'stacked', b'loom',\n",
       "       b'resonator', b'slits', b'lifts', b'hue', b'caddy', b'stitches',\n",
       "       b'dives', b'sleeves', b'folds', b'thinner', b'trim', b'downwards',\n",
       "       b'fixtures', b'handgun', b'rectangle', b'dip', b'hoist', b'grooves',\n",
       "       b'notch', b'ramp', b'rack', b'intersect', b'ankle', b'linemen',\n",
       "       b'timer', b'reins', b'mesh', b'polygon', b'throttle', b'vibrate',\n",
       "       b'scrolling', b'javelin', b'refrigerator', b'punches',\n",
       "       b'concentric', b'rotates', b'revolving', b'vanes', b'bucket',\n",
       "       b'downhill', b'broom', b'shafts', b'outwards', b'waza',\n",
       "       b'cardboard', b'retractable', b'linebackers', b'outfield',\n",
       "       b'counterclockwise', b'grenades', b'thigh', b'parabolic', b'turret',\n",
       "       b'stub', b'chunk', b'sideways', b'wearer', b'tubing', b'sweeps',\n",
       "       b'vibrating', b'crankshaft', b'fretboard', b'fingerboard',\n",
       "       b'flipped', b'plated', b'rollers', b'paddle', b'drilled',\n",
       "       b'tumbling', b'leaps', b'padded', b'noises', b'canopy', b'knuckle',\n",
       "       b'turntable', b'bolts', b'phosphor', b'fences', b'barbed', b'jacks',\n",
       "       b'tray', b'bouncing', b'glued', b'hinged', b'discus', b'popping',\n",
       "       b'ramps', b'affixed', b'twists', b'turrets', b'fists', b'strap',\n",
       "       b'slab', b'diagonally', b'bellows', b'roadway', b'lid', b'tapered',\n",
       "       b'skates', b'sling', b'axle', b'grips', b'punching', b'snare',\n",
       "       b'thumbs', b'straps', b'padding', b'aisle', b'levers',\n",
       "       b'handlebars', b'looping', b'girth', b'fuzes', b'stencil',\n",
       "       b'underside', b'cushion', b'angled', b'snapper', b'platter',\n",
       "       b'adjustable', b'platters', b'conveyor', b'stylus', b'taper',\n",
       "       b'yardage', b'spinners', b'encased', b'curled', b'backpack',\n",
       "       b'strikeout', b'sloped', b'armature', b'trampoline', b'picatinny',\n",
       "       b'detachable', b'twos', b'resonating', b'undamaged', b'axels',\n",
       "       b'hexagons', b'horadric', b'rosin', b'dragsters', b'redesigning',\n",
       "       b'serrated', b'sledges', b'retrace', b'chandeliers', b'motorbike',\n",
       "       b'pinhole', b'shva', b'transmogrifier', b'couches', b'windage'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters.get_words_on_cluster(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
